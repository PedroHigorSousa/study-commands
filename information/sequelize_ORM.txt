
O que é o Sequelize ?
 R: Trata-se de um ORM para banco de dados relacionais.

Com o que ele funciona ? 
 R: MySQL, Postgress, Sqlite.


O que é um ORM:
 - Abstração do banco de dados.
 - Na arquitetura MVC como exemplo, as tabelas viram models.
 - Não é utilizado SQL apenas código JS.

Migrations:
 - Controle de versão para base de dados.

 - Cada arquivo de migration deve conter instruções para criação, alteração ou remoção
  de tabelas ou colunas.

 - (Vantagem): Mantém a base atualizada entre todos desenvolvedores 
   do time e tanbém no ambiente de produção.

 - As migrations ocorrem através de datas, assim não podendo depender de 
   migrations posteriores.

 IMPORTANTE: 
    1 - A partir do momento que essa migration foi repassada para outros desenvolvedores
    ou para o ambiente de produção, ela não pode mais ser alterada.
        a: Caso seja necessário alterar algo, deve-se ser criada uma nova migraiton.

    2 - É possível deafazer uma migration se erramos algo enquanto 
        estivermos desenvolvendo a feature, utilizando o rollback.
    3 - Cada migration deve realizar alterações em apenas uma tabela, sendo assim
        para alterações maiores, deve-se criar várias migrations.
    
Seeds:
    - Necessário para configurar um ambiente de teste, ou seja um forma de popular a base de dados.
    - São executáveis apenas por códigos.
    - Jamais serão utilizados em produção.
    - Caso seja dados que precisam ir para produção, a própria migration pode manipular -
      os dados da tabela.

Exemplo de uso(0): 
    Objetivo(Adicionr um novo usuário com os dados passados)
    SQL:
        INSERT INTO user (name, email)
            VALUES (
                "Juliano Abrão",
                "juliano@gmail.com"
            )
    
    Sequelize (ORM):
        User.create({
            name: 'Juliano Abraão',
            email: 'juliano@gmail.com'
        })

--------------------------------------------------------------------

Exemplo de uso(1): 
    Objetivo(Projetar somente um usuário com os dados passados, que nesse caso é o email)

    SQL:
        SELECT *
        FROM users
        WHERE email = 'juliano@gmail.com'
        LIMIT 1;
    
    Sequelize (ORM):
        User.findOne({
            where:{
                email:'juliano@gmail.com'
            }
        })


Sequelize(Instalação e configuração):

    !INSTALAÇÃO: 
        1º - Realizar instalção do Sequelize
        2º - Realizar a instalação do sequelize-cli, como dependência de DEV.
            Finalidade: Interface que fornece comandos para manipulara criação,
                        manutenção de migrations e models.

    !ESTRUTURA DE PASTAS:
        1º - Criar um pasta (config) dentro da pasta (src)
            - Finalidade: Configurações necessárias para o funcionamento da aplicação.

        2º - Criar pasta (database) e dentro dela a pasta (migrations).
            - Dentro da pasta (database), ficará tudo relativo a parte de database,
            fora a conexão ou a configuração do banco de dados.

        3º - Criar o arquivo (database.js): Responsável pelas configurações da nossa base de dados.

        4º - Criar pasta (app) dentro de (src):
            - Dentro da pasta (app) ficará a maioria dos códigos que envolvem
            as regras de negócio lógica. EX: (controllers, models)

    !CONFIGURAÇÃO:
        1º - Criar um arquivo chamado (sequelize.rc), será responsável por exportar os caminhos
             das pastas (database. migrations, config etc...).

             - Dentro do (sequelize.rc), exportar os caminhos das pastas necessárias:
                (EXEMPLO):
                    module.exports = {
                        config: resolve(__dirname, 'src', 'config', 'database.js'),
                        'models-path': resolve(__dirname, 'src', 'app', 'models'),
                        'migrations-path': resolve(__dirname, 'src', 'database', 'migrations'),
                        'seeders-path': resolve(__dirname, 'src', 'database', 'seeds')
                    }
        2º - Exportar as configurações do banco no arquivo (src/config/database.js)

            POSTGRES:
                (É necessário instalar as dependências: pg, ph-hstore:(yarn add pg pg-hstore))
            {
                dialect: 'postgres', (Qual é o banco de dados que será conectado)
                host: 'localhost',   (Onde o banco de dados se encontra)
                username: 'posgres', (Usuário para acessar o servidor do banco de dados)
                password: 'docker123', (Senha de acesso a servidor de dados de dados)
                database: 'gobarber', (Nome da base de dados que ele deverá se conectar)
                define:{
                    timestamps: true, (Garante que a aplicação possua uma coluna,
                                       created_at e updatad_at dentro de cada tabela do 
                                       banco de dados
                                      )
                    underscored: true, ()
                    underscoredAll: true,

                }
            }